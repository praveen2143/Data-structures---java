package dsa;
class BST{
	class Node{
		int key;
		Node left;
		Node right;
		
		Node(int key){
			this.key = key;
			this.left = null;
			this.right = null;
		}
	}
	
	Node root;
	
	BST(){
		root = null;
	}
	
	void insert(int key){
		root = insertKey(root,key);
	}
	
	Node insertKey(Node root,int key) {
		if(root == null) {
			return new Node(key);
		}
		
		if(key < root.key) {
			root.left = insertKey(root.left,key);
		}else if(key > root.key) {
			root.right = insertKey(root.right,key);
		}
		
		return root;
	}
	
	void delete(int key) {
		root = deleteKey(root,key);
	}
	
	Node deleteKey(Node root,int key) {
		if(root == null)
			return null;
		if(key<root.key) {
			root.left = deleteKey(root.left,key);
		}else if(key>root.key) {
			root.right = deleteKey(root.right,key);
		}else {
			if(root.left == null) {
				return root.right;
			}else if(root.right == null) {
				return root.left;
			}else {
				root.key = minValue(root.right);
				root.right = deleteKey(root.right,root.key);
			}
		}
		return root;
	}
	
	int minValue(Node root) {
		int min = root.key;
		while(root.left != null) {
			min = root.left.key;
			root = root.left;
		}
		return min;
	}
	void inorder() {
		inorderTraversal(root);
	}
	void inorderTraversal(Node root) {
		if(root != null) {
			inorderTraversal(root.left);
			System.out.print( "->" + root.key);
			inorderTraversal(root.right);
		}
	}
}
public class BinarySearchTree {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		BST tree = new BST();

		tree.insert(5);
		tree.insert(6);
		tree.insert(7);
		tree.insert(8);
		tree.insert(1);
		tree.insert(2);
		tree.insert(3);
		tree.insert(4);
		
		tree.delete(5);
		
		tree.inorder();
	}

}
