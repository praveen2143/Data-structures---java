package dsa;

class AVLTREE{
	
	class Node{
		int item,height;
		Node left,right;
		
		Node(int n){
			item = n;
			height = 1;
		}
	}
	
	Node root;
	AVLTREE(){
		root = null;
	} 
	
	int height(Node root) {
		if(root == null)
			return 0;
		return root.height;
	}
	
	int max(int a,int b) {
		return a > b? a:b;
	}
	
	Node leftRotate(Node x) {
		Node temp = x.right;
		Node T2 = temp.left;
		temp.left = x;
		x.right = T2;
		x.height = 1 + max(height(x.left) , height(x.right));
		temp.height = 1 + max(height(temp.left),height(temp.right));
		return temp;
	}
	
	Node rightRotate(Node x) {
		Node temp = x.left;
		Node T2 = temp.right;
		temp.right = x;
		x.left = T2;
		x.height = 1 + max(height(x.left) , height(x.right));
		temp.height = 1 + max(height(temp.left),height(temp.right));
		return temp;
	}
	
	int getBalanceFactor(Node root) {
		if(root == null)
			return 0;
		return height(root.left) - height(root.right);
	}
	
	Node insertNode(Node root,int n) {
		if(root == null)
			return new Node(n);
		if(n < root.item) {
			root.left = insertNode(root.left,n);
		}
		else if(n > root.item) {
			root.right = insertNode(root.right,n);
		}
		else {
			return root;
		}
		
		root.height = 1 + max(height(root.left),height(root.right));
		int balanceFactor = getBalanceFactor(root);
		if(balanceFactor > 1) {
			if(n < root.left.item)
				return rightRotate(root);
			else if(n > root.left.item) {
				root.left = leftRotate(root.left);
				return rightRotate(root);
			}
		}else if(balanceFactor < -1) {
			if(n > root.right.item)
				return leftRotate(root);
			else if(n < root.right.item) {
				root.right = rightRotate(root.right);
				return leftRotate(root);
			}
		}
		
		return root;
	}
	
	Node inorderSuccessor(Node root) {
		while(root.left != null) {
			root = root.left;
		}
		return root;
	}
	
	Node deleteNode(Node root,int n) {
		if(root == null)
			return null;
		if(n < root.item) {
			root.left = deleteNode(root.left,n);
		}
		else if(n > root.item) {
			root.right = deleteNode(root.right,n);
		}
		else {
			if(root.left == null) {
				return root.right;
			}else if(root.right == null) {
				return root.left;
			}else {
				Node temp = inorderSuccessor(root.right);
				root.item = temp.item;
				root.right = deleteNode(root.right,n);
				
			}
			}
		
		root.height = 1 + max(height(root.left),height(root.right));
		int balanceFactor = getBalanceFactor(root);
		if(balanceFactor > 1) {
			if(getBalanceFactor(root.left)>=0)
				return rightRotate(root);
			else {
				root.left = leftRotate(root.left);
				return rightRotate(root);
			}
		}else if(balanceFactor < -1) {
			if(getBalanceFactor(root.right)<=0)
				return leftRotate(root);
			else {
				root.right = rightRotate(root.right);
				return leftRotate(root);
			}
		}
		return root;
	}
	
	void inOrderTraversal(Node root) {
		if(root == null)
			return;
		inOrderTraversal(root.left);
		System.out.println(root.item);
		inOrderTraversal(root.right);
	}
}

public class AVLTree {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		AVLTREE tree = new AVLTREE();
		tree.root = tree.insertNode(tree.root, 1);
		tree.root = tree.insertNode(tree.root, 2);
		tree.root = tree.insertNode(tree.root, 3);
		tree.root = tree.insertNode(tree.root, 8);
		tree.root = tree.insertNode(tree.root, 5);
		tree.root = tree.insertNode(tree.root, 6);
		tree.root = tree.insertNode(tree.root, 7);
		tree.root = tree.deleteNode(tree.root, 1);
		tree.inOrderTraversal(tree.root);
		
		
		
	}
}
