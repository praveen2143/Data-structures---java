package dsa;

public class MergeSort {
	void merge(int a[],int l,int m,int h) {
		int L1 = m -l +1;
		int L2 = h-m;
		int arr1[] = new int[L1];
		int arr2[] = new int[L2];
		
		for(int i=0;i<L1;i++)
			arr1[i] = a[l+i];
		for(int i=0;i<L2;i++)
			arr2[i] = a[m+1+i];
		
		int i=0,j=0,k=l;
		while(i<L1 && j<L2) {
			if(arr1[i]<arr2[j]) {
				a[k] = arr1[i];
				i++;
			}else{
				a[k] = arr2[j];
				j++;
			}
			k++;
		}
		while(i<L1) {
			a[k] = arr1[i];
			i++;
			k++;
		}
		while(j<L2) {
			a[k] = arr2[j];
			j++;
			k++;
		}
	}
	
	void mergeSort(int a[],int l,int h) {
		if(l<h) {
			int m = (h+l)/2;
			mergeSort(a,l,m);
			mergeSort(a,m+1,h);
			merge(a,l,m,h);
		}
	}
	
	void printArray(int a[]) {
		for(int i=0;i<a.length;i++) {
			System.out.println(a[i]);
		}
	}
	public static void main(String[] args) {
		int a[] = {9,8,7,6,5,4,3,2,1};
		MergeSort m = new MergeSort();
		m.mergeSort(a,0,a.length-1);
		m.printArray(a);
	}

}
