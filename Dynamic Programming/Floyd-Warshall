package dsa;

public class FloydsAlgorithm {
static int INF = 9999;

	void FLoydWarshallAlgo(int[][] graph, int v) {
		int matrix[][] = new int[v][v];
		
		for(int i=0;i<v;i++)
			for(int j=0;j<v;j++) {
				matrix[i][j] = graph[i][j];
			}
		
		for(int k=0;k<v;k++)
			for(int i=0;i<v;i++)
				for(int j=0;j<v;j++) {
					if(matrix[i][j] > matrix[i][k] + matrix[k][j]) {
						matrix[i][j] = matrix[i][k] + matrix[k][j];
					}
				}
		
		printMatrix(matrix,v);
	
	}
	
	void printMatrix(int matrix[][],int v) {
		for(int i=0;i<v;i++) {
			System.out.println();
			for(int j=0;j<v;j++) {
				if(matrix[i][j] == INF) {
					System.out.print(matrix[i][j]);
				}else {
					System.out.print(" " + matrix[i][j]);
				}
				
			}
		}
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int graph[][] = { { 0, 3, INF, 5 }, { 2, 0, INF, 4 }, { INF, 1, 0, INF }, { INF, INF, 2, 0 } };
		int v = 4;
		FloydsAlgorithm f = new FloydsAlgorithm();
		f.FLoydWarshallAlgo(graph,v);
	}
	

}
