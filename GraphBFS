package dsa;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

class Graph2{
	private ArrayList<ArrayList<Integer>> graph;
	int visited[];
	
	Graph2(int v){
		graph = new ArrayList<ArrayList<Integer>>();
		visited = new int[v];
		for(int i =0;i<v;i++) {
			graph.add(new ArrayList<Integer>());
			visited[i] = 0;
		}
		
	}
	
	void addEdge(int src,int des) {
		graph.get(src).add(des);
		graph.get(des).add(src);
	}
	
	void BFS(int start) {
		LinkedList<Integer> q = new LinkedList<Integer>();
		visited[start] = 1;
		q.add(start);
		while(q.size()!=0) {
			int node = q.pollFirst();
			System.out.println(node);
			ArrayList<Integer> temp = graph.get(node);
			for(int i=0;i<temp.size();i++) {
				int t = temp.get(i);
				if(visited[t]==0) {
					visited[t] = 1;
					q.add(t);
				}
			}
		}
		
 	}
}

public class GraphBFS {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Graph2 g = new Graph2(5);
		g.addEdge(0, 1);
		g.addEdge(1, 2);
		g.addEdge(1, 3);
		g.addEdge(0, 3);
		g.addEdge(2, 4);
		
		g.BFS(0);
	}

}
