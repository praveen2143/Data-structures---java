package dsa;
class Dequeue{
	private int arr[];
	private int size;
	private int rear;
	private int front;
	
	Dequeue(int size){
		arr = new int[size];
		this.size = size;
		rear = -1;
		front = -1;
	}
	
	Boolean isFull() {
		if((front == 0 && rear == size-1) || (front == rear + 1)) {
			return true;
		}
		return false;
	}
	
	Boolean isEmpty() {
		if(rear == -1) {
			return true;
		}
		return false;
	}
	
	void insertFront(int num) {
		if(isFull()) {
			System.out.println("Dequeue is full");
			return;
		}
		if(front == -1) {
			front = 0;
			rear = 0;
			arr[front] = num;
		}else if(front ==0) {
			front = size -1;
			arr[front] = num;
		}else {
			front = front -1;
			arr[front] = num;
		}
	}
	
	void insertRear(int num) {
		if(isFull()) {
			System.out.println("Dequeue is full");
			return;
		}
		if(rear == -1) {
			front = 0;
			rear = 0;
			arr[rear] = num;
		}else if(rear ==size-1) {
			rear = 0;
			arr[rear] = num;
		}else {
			rear = rear +1;
			arr[rear] = num;
		}
		
	}
	
	int getFront() {
		if(isEmpty()) {
			System.out.println("Dequeue if empty");
			return -9999;
		}
		if(rear == front) {
			int temp = arr[front];
			rear = 0;
			front =0;
			return temp;
		}else if(front == size -1) {
			int temp = arr[front];
			front =0;
			return temp;
		}else {
			int temp = arr[front];
			front++;
			return temp;
		}
	}
	
	int getRear() {
		if(isEmpty()) {
			System.out.println("Dequeue if empty");
			return -9999;
		}
		if(rear == front) {
			int temp = arr[rear];
			rear = 0;
			front =0;
			return temp;
		}else if(rear == 0) {
			int temp = arr[rear];
			rear =size -1;
			return temp;
		}else {
			int temp = arr[rear];
			rear--;
			return temp;
		}
	}
	
	void printQueue() {
		if(front <=rear) {
			for(int i = front;i<=rear;i++) {
				System.out.print(arr[i] + " ");
			}
		}else {
			for(int i=front;i<=size-1;i++) {
				System.out.print(arr[i] + " ");
			}
			for(int i = 0;i<=rear;i++) {
				System.out.print(arr[i] + " ");
			}
		}
		
	}
}

public class DequeueDSA {
	public static void main(String[] args) {
		Dequeue q = new Dequeue(5);
		q.getRear();
		q.getFront();
		q.insertRear(1);
		q.insertRear(2);
		q.insertRear(3);
		q.insertRear(4);
		q.insertFront(5);
		q.insertFront(6);
		System.out.println(q.getFront());
		System.out.println(q.getFront());
		System.out.println(q.getFront());
		System.out.println(q.getFront());
		q.printQueue();

	}

}
